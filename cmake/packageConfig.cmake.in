@PACKAGE_INIT@

set(@PROJECT_NAME@_VERSION_MAJOR "@PROJECT_VERSION_MAJOR@")
set(@PROJECT_NAME@_VERSION_MINOR "@PROJECT_VERSION_MINOR@")
set(@PROJECT_NAME@_VERSION_PATCH "@PROJECT_VERSION_PATCH@")

set(@PROJECT_NAME@_VERSION ${@PROJECT_NAME@_VERSION_MAJOR}.${@PROJECT_NAME@_VERSION_MINOR}.${@PROJECT_NAME@_VERSION_PATCH})

### CREATE THE TARGETS ###

include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")

### CHECK THE REQUESTED COMPONENTS ###

set(@PROJECT_NAME@_COMPONENTS "core")
if (@USE_JSON@)
    set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "json")
endif ()
if (@USE_OPENMP@)
    set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "openmp")
endif ()
if (@USE_PTHREAD@)
    set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "pthread")
endif ()
if (@USE_PYTHON@)
    set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "python")
endif ()
if (@USE_REALSENSE@)
    set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "realsense")
endif ()
if (@USE_OPENCV@)
    set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "opencv")
    if (@USE_REALSENSE@)
        set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "opencv_realsense")
    endif ()
endif ()
if (@USE_EIGEN@)
    set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "eigen")
    if (@USE_JSON@)
            set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "eigen_json")
    endif ()
    if (@USE_OPENCV@)
        set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "eigen_opencv")
    endif ()
    if (@USE_REALSENSE@)
        set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "eigen_realsense")
    endif ()
endif ()
set(@PROJECT_NAME@_COMPONENTS ${@PROJECT_NAME@_COMPONENTS} "world")

if(NOT @PROJECT_NAME@_FIND_COMPONENTS)
    set(@PROJECT_NAME@_FIND_COMPONENTS "world")
endif()
message("@PROJECT_NAME@ requested components: ${@PROJECT_NAME@_FIND_COMPONENTS}")
set(@PROJECT_NAME@_FIND_COMPONENTS_LOW )
foreach(__@PROJECT_NAME@_find_component ${@PROJECT_NAME@_FIND_COMPONENTS})
    string(TOLOWER "${__@PROJECT_NAME@_find_component}" __@PROJECT_NAME@_find_componentLOW)
    set(@PROJECT_NAME@_FIND_COMPONENTS_LOW ${@PROJECT_NAME@_FIND_COMPONENTS_LOW} ${__@PROJECT_NAME@_find_componentLOW})
endforeach()

### set the _REQUEST_ package-variables to 0 or 1 depending on whether the requested components contain the data or not ###
set(@PROJECT_NAME@_EXTRA_PACKAGES_LOWERCASE eigen opencv openmp python realsense)
foreach(__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE ${@PROJECT_NAME@_EXTRA_PACKAGES_LOWERCASE})
    set(@PROJECT_NAME@_REQUEST_${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} 0)
endforeach()
foreach(__@PROJECT_NAME@_find_componentLOW ${@PROJECT_NAME@_FIND_COMPONENTS_LOW})
    foreach(__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE ${@PROJECT_NAME@_EXTRA_PACKAGES_LOWERCASE})
        if ("${__@PROJECT_NAME@_find_componentLOW}" MATCHES ".*${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE}.*")
            set(@PROJECT_NAME@_REQUEST_${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} 1)
        endif()
    endforeach()
    if ("${__@PROJECT_NAME@_find_componentLOW}" MATCHES "world")
        foreach(__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE ${@PROJECT_NAME@_EXTRA_PACKAGES_LOWERCASE})
            set(@PROJECT_NAME@_REQUEST_${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} 1)
        endforeach()
    endif()
endforeach()

### ADD CORE EXTERNAL TARGETS ###

### ADD EXTERNAL TARGETS IF REQUESTED ###

foreach(__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE ${@PROJECT_NAME@_EXTRA_PACKAGES_LOWERCASE})
    if (NOT (${@PROJECT_NAME@_REQUEST_${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE}}))
        continue()
    endif ()
    if (${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} MATCHES eigen)
        if ((NOT DEFINED Eigen3_FOUND) OR (NOT ${Eigen3_FOUND}))
            if ("${EIGEN3_VERSION}" STREQUAL "")
                find_package(Eigen3 REQUIRED)
            else ()
                find_package(Eigen3 ${Eigen3_VERSION} REQUIRED)
            endif ()
        endif ()
    elseif (${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} MATCHES opencv)
        if (((NOT DEFINED OPENCV_CORE_FOUND) OR (NOT ${OPENCV_CORE_FOUND}) OR (NOT DEFINED OpenCV_core_FOUND) OR (NOT ${OpenCV_core_FOUND})) OR
            ((NOT DEFINED OPENCV_IMGPROC_FOUND) OR (NOT ${OPENCV_IMGPROC_FOUND}) OR (NOT DEFINED OpenCV_imgproc_FOUND) OR (NOT ${OpenCV_imgproc_FOUND})) OR
            ((NOT DEFINED OPENCV_HIGHGUI_FOUND) OR (NOT ${OPENCV_HIGHGUI_FOUND}) OR (NOT DEFINED OpenCV_highgui_FOUND) OR (NOT ${OpenCV_highgui_FOUND})) OR
            ((NOT DEFINED OPENCV_CALIB3D_FOUND) OR (NOT ${OPENCV_CALIB3D_FOUND}) OR (NOT DEFINED OpenCV_calib3d_FOUND) OR (NOT ${OpenCV_calib3d_FOUND})))
            if ("${OPENCV_VERSION}" STREQUAL "")
                find_package(OpenCV REQUIRED COMPONENTS core imgproc highgui calib3d)
            else ()
                find_package(OpenCV ${OPENCV_VERSION} REQUIRED COMPONENTS core imgproc highgui calib3d)
            endif ()
        endif ()
    elseif (${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} MATCHES openmp)
        if ((NOT DEFINED OpenMP_FOUND) OR (NOT ${OpenMP_FOUND}))
            find_package(OpenMP REQUIRED)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
            set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
            # set(@PROJECT_NAME@_EXTERNAL_LIBRARIES ${OpenMP_CXX_LIBRARIES} ${@PROJECT_NAME@_EXTERNAL_LIBRARIES})
        endif ()
    elseif (${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} MATCHES python)
        if (((NOT DEFINED PYTHON_FOUND) OR (NOT ${PYTHON_FOUND})) AND (DEFINED PYBIND11_PYTHON_VERSION) AND (${PYBIND11_PYTHON_VERSION}))
            find_package(Python3 ${PYBIND11_PYTHON_VERSION} REQUIRED COMPONENTS Interpreter Development)
            message("Found package python with version ${PYBIND11_PYTHON_VERSION}")
        endif ()
        if ((NOT DEFINED PYBIND11_FOUND) OR (NOT ${PYBIND11_FOUND}))
            find_package(pybind11 REQUIRED)
        endif ()
    elseif (${__@PROJECT_NAME@_EXTRA_PACKAGE_LOWERCASE} MATCHES realsense)
        if ((NOT DEFINED realsense2_FOUND) OR (NOT ${realsense2_FOUND}))
            find_package(realsense2 REQUIRED)
        endif ()
    endif ()
endforeach()

### START POPULATING @PROJECT_NAME@_INCLUDE and @PROJECT_NAME@_LIBRARY variables

set_and_check(@PROJECT_NAME@_INCLUDE "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set(@PROJECT_NAME@_LIBRARY )  # reset content

### ADD THE REQUESTED COMPONENTS TO @PROJECT_NAME@_LIBRARY ###

# first, iterate through the components because of inter-dependencies-ordering
foreach(__@PROJECT_NAME@_component ${@PROJECT_NAME@_COMPONENTS})
    string(TOLOWER "${__@PROJECT_NAME@_component}" __@PROJECT_NAME@_componentLOW)
    list(FIND @PROJECT_NAME@_FIND_COMPONENTS_LOW ${__@PROJECT_NAME@_componentLOW} __componentIdx)
    if(__componentIdx LESS 0)
        # component was not requested
        continue()
    endif ()
    if (${__@PROJECT_NAME@_componentLOW} MATCHES world)
        set(@PROJECT_NAME@_LIBRARY @PROJECT_NAME@::@PROJECT_TARGET@ ${@PROJECT_NAME@_LIBRARY})
    else ()
        set(@PROJECT_NAME@_LIBRARY @PROJECT_NAME@::@PROJECT_TARGET@_${__@PROJECT_NAME@_component} ${@PROJECT_NAME@_LIBRARY})
    endif ()
    set(@PROJECT_NAME@_${__@PROJECT_NAME@_component}_FOUND TRUE)  # indicate that module is found
    string(TOUPPER "${__@PROJECT_NAME@_component}" __@PROJECT_NAME@_componentUP)
    set(@PROJECT_NAME@_${__@PROJECT_NAME@_componentUP}_FOUND 1)  # indicate that module is found
endforeach ()

### SET THE NOT FOUND COMPONENTS! ###

# second, iterate through the requested components and check if found or not...
foreach(__@PROJECT_NAME@_component ${@PROJECT_NAME@_FIND_COMPONENTS})
    if (NOT @PROJECT_NAME@_${__@PROJECT_NAME@_component}_FOUND)
        # Either the component is required or the user did not set any components at all.
        # In the latter case, the @PROJECT_NAME@_FIND_REQUIRED_<component> variable will not be defined
        # since it is not set by this config. So let's assume the implicitly set components are always required.
        if(NOT DEFINED @PROJECT_NAME@_FIND_REQUIRED_${__@PROJECT_NAME@_component} OR @PROJECT_NAME@_FIND_REQUIRED_${__@PROJECT_NAME@_component})
            message(FATAL_ERROR "${__@PROJECT_NAME@_component} is required but was not found")
        elseif(NOT @PROJECT_NAME@_FIND_QUIETLY)
            # The component was marked as optional using OPTIONAL_COMPONENTS
            message(WARNING "Optional component ${__@PROJECT_NAME@_component} was not found")
        endif()
        #indicate that module is NOT found
        string(TOUPPER "${__@PROJECT_NAME@_component}" __@PROJECT_NAME@_componentUP)
        set(${__@PROJECT_NAME@_componentUP}_FOUND "${__@PROJECT_NAME@_componentUP}_FOUND-NOTFOUND")
        set(@PROJECT_NAME@_${__@PROJECT_NAME@_component}_FOUND FALSE)
    endif()
endforeach()

check_required_components(@PROJECT_NAME@)

# message("@PROJECT_NAME@_INCLUDE set to @PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
# get_target_property(@PROJECT_NAME@_INCLUDE_CHECK @PROJECT_NAME@::@PROJECT_NAME@ INTERFACE_INCLUDE_DIRECTORIES)
# message("@PROJECT_NAME@_INCLUDE_CHECK is ${@PROJECT_NAME@_INCLUDE_CHECK}")
